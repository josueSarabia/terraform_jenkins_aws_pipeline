/* def qualityGateValidation(qg) {
    if (qg.status != 'OK') {
        error "Pipeline aborted due to quality gate failure: ${qg.status}"
        return true
    }

    return false
} */

pipeline {
    environment {
        ECR_REPO_URL = ""
        FEATURE = ""
    }

    agent { label "jenkins-worker"}
    /* agent any */
    stages {

        stage('Validate Commit') {
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                    changeRequest target: 'main'
                    changeRequest target: 'staging'
                }
            }
            steps {
                script {
                    try {
                        GIT_LOG = sh (
                            script: "git log -1 --pretty=%B ${GIT_COMMIT}",
                            returnStdout: true
                        ).trim()

                        EXTRACTED_GIT_LOG = sh (
                            script: "echo ${GIT_LOG} | grep -Po '\\[\\K[^]]*'" ,
                            returnStdout: true
                        ).trim()

                        if (EXTRACTED_GIT_LOG == "frontend") {
                            ECR_REPO_URL = ECR_REPO_URL_FRONTEND
                            FEATURE = "frontend"
                        } else if (EXTRACTED_GIT_LOG == "backend") {
                            ECR_REPO_URL = ECR_REPO_URL_BACKEND
                            FEATURE = "backend"
                        }
                    } catch (err) {
                        echo "No feature was included in the commit. Please add [name-of-feature] in the commit"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Start Container for Testing') {
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                    changeRequest target: 'main'
                    changeRequest target: 'staging'
                }
            }
            steps {
                script {
                    sh "docker compose -f ./app/backend/docker-compose.yml rm -f"
                    sh "docker network create frontend_default"
                    sh "docker compose -f ./app/backend/docker-compose.yml up -d backend"
                }
            }
        }

        stage('Run Unit Tests') { 
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                    changeRequest target: 'main'
                    changeRequest target: 'staging'
                }
            }
            steps {
                script {
                    sh 'docker exec backend npm run test'
                }
            }
            post {
                success {
                    script {
                        sh 'docker compose -f ./app/backend/docker-compose.yml down --rmi all'
                        sh 'docker network rm frontend_default'
                    }
                }
                failure {
                    script {
                        sh 'docker compose -f ./app/backend/docker-compose.yml down --rmi all' 
                        sh 'docker network rm frontend_default'
                    }
                }
            }
        }

        /* stage('SonarQube Analysis') {
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                    changeRequest target: 'main'
                    changeRequest target: 'staging'
                }
            }
            environment {
                SCANNER_HOME = tool 'sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "cd ./app/; $SCANNER_HOME/bin/sonar-scanner -Dsonar.host.url=http://$SONAR_HOST:9000"
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: qualityGateValidation(waitForQualityGate())
                }
            }
        } */

        stage('Build Image') {
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                }
            }
            steps {
                script {
                    sh "docker build -t ${ECR_REPO_URL}:${GIT_COMMIT} ./app/$FEATURE"
                }
            }
        }

        stage('Push to Registry') {
            // when {
            //    branch "DS-*"
            // }
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                }
            }
            steps {
                script {
                    sh "aws ecr get-login-password --region us-east-1 --profile jenkins | docker login --username AWS --password-stdin ${ECR_REPO_URL}"
                    sh "docker push ${ECR_REPO_URL}:${GIT_COMMIT}"
                    sh "docker rmi ${ECR_REPO_URL}:${GIT_COMMIT}"
                }
            }
        }

        stage ('Push revision') {
            when {
                anyOf {
                    branch "staging"
                    branch "main"
                }
            }
            steps {
                script {

                    sh "bash ./infra/terraform/scripts/replace_string.sh REPO_URL ${ECR_REPO_URL} ./infra/terraform/docker-compose/app/${FEATURE}/docker-compose.yml"
                    sh "bash ./infra/terraform/scripts/replace_string.sh COMMIT ${GIT_COMMIT} ./infra/terraform/docker-compose/app/${FEATURE}/docker-compose.yml"
                   
                    sh "bash ./infra/terraform/scripts/replace_string.sh ECR_REPO_URL ${ECR_REPO_URL} ./infra/terraform/codedeploy_scripts/start_container.sh"
                    sh "bash ./infra/terraform/scripts/replace_string.sh FEATURE ${FEATURE} ./infra/terraform/codedeploy_scripts/start_container.sh"

                    sh "bash ./infra/terraform/scripts/replace_string.sh FEATURE ${FEATURE} ./infra/terraform/codedeploy_scripts/stop_old_container.sh"
                    
                    
                    sh "mkdir -p ./infra/terraform/codedeploy_scripts/docker-compose/app/${FEATURE}/"
                    sh "mv ./infra/terraform/docker-compose/app/${FEATURE}/docker-compose.yml ./infra/terraform/codedeploy_scripts/docker-compose/app/${FEATURE}/docker-compose.yml"

                    if (env.BRANCH_NAME == "staging") { // env.CHANGE_TARGET == "staging" ||
                        sh 'aws deploy push \
                            --application-name simple-web_staging \
                            --description "This is a revision for the application simple-web_staging" \
                            --ignore-hidden-files \
                            --s3-location s3://artifacts-demo-bucket/codedeploy_scripts_staging.zip \
                            --source ./infra/terraform/codedeploy_scripts/ \
                            --profile jenkins '
                    } else { // main
                        sh 'aws deploy push \
                            --application-name simple-web \
                            --description "This is a revision for the application simple-web" \
                            --ignore-hidden-files \
                            --s3-location s3://artifacts-demo-bucket/codedeploy_scripts.zip \
                            --source ./infra/terraform/codedeploy_scripts/ \
                            --profile jenkins '
                    }
                    
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch "staging"
                }
            }
            steps {
                script {
                    sh 'aws deploy create-deployment \
                        --application-name simple-web_staging \
                        --deployment-group-name simple-web_deployment_group_staging \
                        --s3-location bucket=artifacts-demo-bucket,key=codedeploy_scripts_staging.zip,bundleType=zip \
                        --profile jenkins'
                }
            }
        } 
        
        stage('Deploy to Production') {
            when {
                anyOf {
                    branch "main"
                }
            }
            steps {
                script {
                    sh 'aws deploy create-deployment \
                        --application-name simple-web \
                        --deployment-group-name simple-web_deployment_group \
                        --s3-location bucket=artifacts-demo-bucket,key=codedeploy_scripts.zip,bundleType=zip \
                        --profile jenkins'
                }
            }
        } 
        
       
    }
}