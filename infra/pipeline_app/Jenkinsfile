/* def qualityGateValidation(qg) {
    if (qg.status != 'OK') {
        error "Pipeline aborted due to quality gate failure: ${qg.status}"
        return true
    }

    return false
} */

pipeline {
    /* environment {
    } */

    agent { label "jenkins-worker"}
    stages {


        stage('Start Container for Testing') {
            steps {
                script {
                    sh 'docker compose -f ./app/docker-compose.yml rm -f'
                    sh 'docker compose -f ./app/docker-compose.yml up -d webapp'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    sh 'docker exec webapp npm run test'
                }
            }
            post {
                success {
                    script {
                        sh 'docker compose -f ./app/docker-compose.yml down'
                    }
                }
                failure {
                    script {
                        sh 'docker compose -f ./app/docker-compose.yml down'
                    }
                }
            }
        }

        /* stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-scanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "cd ./app/; $SCANNER_HOME/bin/sonar-scanner -Dsonar.host.url=http://$SONAR_HOST:9000"
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: qualityGateValidation(waitForQualityGate())
                }
            }
        } */

        stage ('Push revision') {
            steps {
                script {
                    sh "bash ./infra/terraform/scripts/replace_string.sh REPO_URL ${ECR_REPO_URL} ./infra/terraform/codedeploy_scripts/start_container.sh"
                    sh "bash ./infra/terraform/scripts/replace_string.sh COMMIT ${GIT_COMMIT} ./infra/terraform/codedeploy_scripts/start_container.sh"
                    sh 'aws deploy push \
                            --application-name simple-web \
                            --description "This is a revision for the application simple-web" \
                            --ignore-hidden-files \
                            --s3-location s3://artifacts-demo-bucket/codedeploy_scripts.zip \
                            --source ./infra/terraform/codedeploy_scripts/ \
                            --profile jenkins '
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    sh "docker build -t ${ECR_REPO_URL}:${GIT_COMMIT} ./app/"
                }
            }
        }

        stage('Push to Registry') {
            // when {
            //    branch "main"
            // }
            steps {
                script {
                    sh "aws ecr get-login-password --region us-east-1 --profile jenkins | docker login --username AWS --password-stdin ${ECR_REPO_URL}"
                    sh "docker push ${ECR_REPO_URL}:${GIT_COMMIT}"
                    sh "docker rmi ${ECR_REPO_URL}:${GIT_COMMIT}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh 'aws deploy create-deployment \
                        --application-name simple-web \
                        --deployment-group-name simple-web_deployment_group \
                        --s3-location bucket=artifacts-demo-bucket,key=codedeploy_scripts.zip,bundleType=zip \
                        --profile jenkins'
                }
            }
        }
    }
}